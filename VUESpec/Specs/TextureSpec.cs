using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using VUESpec.Types;

namespace VUESpec.Specs
{
    [DefaultProperty("Name")]
    public class TextureSpec : ISpec
    {
        private static readonly string templateFileName = @"Templates\TextureROMSpec.c.template";

        private string definitionName = "";
        private int frameCount = 1;
        private int paletteNumber = 1;

        public TextureSpec(string imageName)
        {
            this.BGMapSpecName = imageName + "Map";
            this.Size = new GridSize(64, 64);
            this.Padding = new GridSize(64, 64);
        }

        [Description("Static C definition name to be used. Example 'MY_IMAGE'. This will be auto-appended with '_TX'")]
        public string Name
        {
            get
            {
                return this.definitionName;
            }
            set
            {
                // Standardize separators
                string name = value.ToUpper().Replace(" ", "_").Replace("-", "_");
                this.definitionName = name;

                if (!name.EndsWith("_TX"))
                {
                    this.definitionName += "_TX";
                }
            }
        }

        [Description("The CharSetSpec name ending with _CH")]
        public string CharSetSpecName
        {
            get;
            set;
        }

        [Description("The BGMapSpec name autogenerated via Grit.")]
        public string BGMapSpecName
        {
            get;
            internal set;
        }

        [Description("The size of the texture in rows and columns.")]
        public GridSize Size
        {
            get;
            set;
        }

        [Description("Padding for affine/hbias transformations.")]
        public GridSize Padding
        {
            get;
            set;
        }

        [Description("The total number of animation frames.")]
        public int FrameCount
        {
            get
            {
                return frameCount;
            }

            set
            {
                frameCount = Math.Max(1, value);
            }
        }

        [Description("Palatte number [0-3].")]
        public int PaletteNumber
        {
            get
            {
                return paletteNumber;
            }

            set
            {
                paletteNumber = Math.Min(3, Math.Max(0, value));
            }
        }

        [Description("Can the texture be reused by multiple entities.")]
        public bool Recyclable
        {
            get;
            set;
        }

        [Description("Flip image horizontally")]
        public bool HorizontalFlip
        {
            get;
            set;
        }

        [Description("Flip image vertically")]
        public bool VerticalFlip
        {
            get;
            set;
        }

        public string RenderCode()
        {
            var parts = new Dictionary<string, object>()
            {
                {"TextureName", this.Name },
                {"CharSetSpecName", this.CharSetSpecName},
                {"BGMapSpecName", this.BGMapSpecName },
                {"Cols", this.Size.Columns },
                {"Rows", this.Size.Rows },
                {"PaddingCols", this.Padding.Columns },
                {"PaddingRows", this.Padding.Rows },
                {"FrameCount", this.FrameCount },
                {"PaletteNumber", this.PaletteNumber },
                {"Recyclable", this.Recyclable },
                {"VerticalFlip", this.VerticalFlip },
                {"HorizontalFlip", this.HorizontalFlip },
            };

            using (TextReader reader = new StreamReader(new FileStream(templateFileName, FileMode.Open)))
            {
                string code = reader.ReadToEnd();
                return code.Format(parts);
            }
        }
    }
}
